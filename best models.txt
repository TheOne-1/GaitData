0.930， 0.936， 0.932

lr=0.001

class ProcessorLR2DInception(ProcessorLR):
    def define_cnn_model(self):
        """
        Modified Inception V3 model. Referred to https://blog.csdn.net/zzc15806/article/details/83447006
        :return:
        """
        main_input_shape = list(self._x_train.shape)
        main_input = Input((main_input_shape[1:]), name='main_input')
        kernel_regu = regularizers.l2(0.01)

        tower_1 = Conv2D(64, (3, 3), padding='same', activation='relu')(main_input)

        tower_2 = Conv2D(64, (21, 1), padding='same', activation='relu', kernel_regularizer=kernel_regu)(main_input)

        tower_3 = Conv2D(64, (1, 1), padding='same', activation='relu')(main_input)

        joint_output_1 = keras.layers.concatenate([tower_1, tower_2, tower_3], axis=3)

        tower_1 = Conv2D(16, (1, 1), padding='same', activation='relu', kernel_regularizer=kernel_regu)(joint_output_1)
        tower_1 = Conv2D(16, (3, 3), padding='same', activation='relu')(tower_1)

        tower_2 = Conv2D(16, (1, 1), padding='same', activation='relu', kernel_regularizer=kernel_regu)(joint_output_1)
        tower_2 = Conv2D(16, (5, 5), padding='same', activation='relu', kernel_regularizer=kernel_regu)(tower_2)

        tower_3 = MaxPooling2D((3, 3), strides=(1, 1), padding='same')(joint_output_1)
        tower_3 = Conv2D(16, (1, 1), padding='same', activation='relu')(tower_3)

        joint_output_2 = keras.layers.concatenate([tower_1, tower_2, tower_3], axis=3)

        tower_1 = Conv2D(1, (1, 1), padding='same', activation='relu', kernel_regularizer=kernel_regu)(joint_output_2)
        tower_1 = Conv2D(1, (3, 3), padding='same', activation='relu')(tower_1)

        tower_2 = Conv2D(1, (1, 1), padding='same', activation='relu', kernel_regularizer=kernel_regu)(joint_output_2)
        tower_2 = Conv2D(1, (5, 5), padding='same', activation='relu', kernel_regularizer=kernel_regu)(tower_2)

        tower_3 = MaxPooling2D((3, 3), strides=(1, 1), padding='same')(joint_output_2)
        tower_3 = Conv2D(1, (1, 1), padding='same', activation='relu')(tower_3)

        joint_output_3 = keras.layers.concatenate([tower_1, tower_2, tower_3], axis=3)
        joint_output_3 = MaxPooling2D((50, 1), strides=(1, 1), padding='valid')(joint_output_3)
        # joint_output_3 = MaxPooling2D((5, 5), strides=(5, 5), padding='valid')(joint_output_3)
        # joint_output_3 = MaxPooling2D((3, 3), strides=(3, 3), padding='valid')(joint_output_3)

        joint_output_3 = Activation('relu')(joint_output_3)
        main_outputs = Flatten()(joint_output_3)

        aux_input = Input(shape=(2,), name='aux_input')
        aux_joined_outputs = concatenate([main_outputs, aux_input])

        aux_joined_outputs = Dense(90, activation='relu')(aux_joined_outputs)
        aux_joined_outputs = Dense(50, activation='relu')(aux_joined_outputs)
        aux_joined_outputs = Dense(10, activation='relu')(aux_joined_outputs)
        aux_joined_outputs = Dense(1, activation='linear')(aux_joined_outputs)
        model = Model(inputs=[main_input, aux_input], outputs=aux_joined_outputs)
        self.model = model





class ProcessorLRNoResample(ProcessorLR):
    def convert_input(self, input_all_list, sampling_fre, data_clip_start=-40, data_clip_end=25):
        """
        input start from strike-20 to strike+20
        """
        step_num = len(input_all_list)
        # data_clip_start, data_clip_end = -40, 25
        step_input = np.zeros([step_num, data_clip_end - data_clip_start, self.channel_num])
        aux_input = np.zeros([step_num, 2])
        for i_step in range(step_num):
            acc_gyr_data = input_all_list[i_step][:, 0:self.channel_num]
            step_len = acc_gyr_data.shape[0]
            aux_input[i_step, 0] = step_len
            strike_sample_num = int(np.where(input_all_list[i_step][:, -1] == 1)[0])
            aux_input[i_step, 1] = strike_sample_num
            step_input[i_step, :, :] = acc_gyr_data[strike_sample_num+data_clip_start:strike_sample_num+data_clip_end, :]

        aux_input = ProcessorLR.clean_aux_input(aux_input)
        return step_input, aux_input

    def define_cnn_model(self):
        """
        Convolution kernel shape changed from 1D to 2D.
        :return:
        """
        main_input_shape = list(self._x_train.shape)
        main_input = Input((main_input_shape[1:]), name='main_input')
        # base_size = int(self.sensor_sampling_fre*0.01)

        # kernel_init = 'lecun_uniform'
        kernel_regu = regularizers.l2(0.01)
        # kernel_regu = None

        # for each feature, add 35 * 1 cov kernel
        tower_1 = Conv2D(filters=12, kernel_size=(35, 1), kernel_regularizer=kernel_regu)(main_input)
        tower_1 = MaxPooling2D(pool_size=(16, main_input_shape[2]+1-1))(tower_1)

        # for each feature, add 20 * 1 cov kernel
        tower_2 = Conv2D(filters=12, kernel_size=(20, 1), kernel_regularizer=kernel_regu)(main_input)
        tower_2 = MaxPooling2D(pool_size=(31, main_input_shape[2]+1-1))(tower_2)

        # for each feature, add 20 * 1 cov kernel
        tower_3 = Conv2D(filters=12, kernel_size=(10, 1), kernel_regularizer=kernel_regu)(main_input)
        tower_3 = MaxPooling2D(pool_size=(41, main_input_shape[2]+1-1))(tower_3)

        # for each feature, add 20 * 1 cov kernel
        tower_4 = Conv2D(filters=12, kernel_size=(3, 1), kernel_regularizer=kernel_regu)(main_input)
        tower_4 = MaxPooling2D(pool_size=(48, main_input_shape[2]+1-1))(tower_4)

        # for each feature, add 20 * 1 cov kernel
        tower_5 = Conv2D(filters=20, kernel_size=(1, main_input_shape[2]), kernel_regularizer=kernel_regu)(main_input)
        tower_5 = MaxPooling2D(pool_size=(50, 1))(tower_5)

        joined_outputs = concatenate([tower_1, tower_2, tower_3, tower_4, tower_5], axis=-1)
        joined_outputs = Activation('relu')(joined_outputs)
        main_outputs = Flatten()(joined_outputs)

        aux_input = Input(shape=(2,), name='aux_input')
        aux_joined_outputs = concatenate([main_outputs, aux_input])

        aux_joined_outputs = Dense(50, activation='relu')(aux_joined_outputs)
        aux_joined_outputs = Dense(50, activation='relu')(aux_joined_outputs)
        aux_joined_outputs = Dense(10, activation='relu')(aux_joined_outputs)
        aux_joined_outputs = Dense(1, activation='linear')(aux_joined_outputs)
        model = Model(inputs=[main_input, aux_input], outputs=aux_joined_outputs)
        self.model = model